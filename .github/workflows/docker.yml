name: Test Docker

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JFROG_ID: ${{ secrets.JFROG_ID }}
      JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
      JFROG_EMAIL: ${{ secrets.JFROG_EMAIL }}
      JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
      API: ${{ secrets.API }}
      SERVER_API: ${{ secrets.SERVER_API }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      LOCAL_OSV: false
      OSV_URL: ${{ secrets.OSV_URL }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SELF_URL: ${{ secrets.SELF_URL }}
      OAUTH_TOKEN_URL: ${{ secrets.OAUTH_TOKEN_URL }}

    steps:
    - uses: actions/checkout@v1

    - name: Create .env file
      run: |
        echo "JFROG_ID=${{ secrets.JFROG_ID }}" > .env
        echo "JFROG_USERNAME=${{ secrets.JFROG_USERNAME }}" >> .env
        echo "JFROG_EMAIL=${{ secrets.JFROG_EMAIL }}" >> .env
        echo "JFROG_TOKEN=${{ secrets.JFROG_TOKEN }}" >> .env
        echo "API=${{ secrets.API }}" >> .env
        echo "SERVER_API=${{ secrets.SERVER_API }}" >> .env
        echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
        echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
        echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
        echo "LOCAL_OSV=false" >> .env
        echo "OSV_URL=${{ secrets.OSV_URL }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "SELF_URL=${{ secrets.SELF_URL }}" >> .env
        echo "OAUTH_TOKEN_URL=${{ secrets.OAUTH_TOKEN_URL }}" >> .env

    - name: test_docker_compose_up
      run: |
        docker compose up -d
        sleep 30

        if docker compose ps | grep -q "Up.*healthy"; then
          echo "All services are running and healthy."
          docker compose down
          exit 0
        else
          echo "One or more services failed to start or are not healthy."
          docker compose ps
          docker compose logs
          docker compose down
          exit 1
        fi
