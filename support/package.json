{
  "name": "lsm-support",
  "version": "1.0.0",
  "description": "Support scripts for Artifactory testing management",
  "license": "ISC",
  "author": "",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "repositories": "rm -rf dist && tsc && node dist/src/repositories.js",
    "test-docker": "dotenv -- bash -c 'echo $JFROG_TOKEN | docker login $JFROG_ID.jfrog.io --username $JFROG_USERNAME --password-stdin; docker pull $JFROG_ID.jfrog.io/docker/ubuntu:latest'",
    "test-docker-dangerous": "echo 'This is correct syntax, but its likely been taken down by the Docker team due to being malicious.'; dotenv -- bash -c 'echo $JFROG_TOKEN | docker login $JFROG_ID.jfrog.io --username $JFROG_USERNAME --password-stdin; docker pull $JFROG_ID.jfrog.io/docker/linux:3.11.0-12.19'",
    "test-npm": "dotenv -- bash -c 'cd ../tests/npm; chmod +x setup.sh; ./setup.sh'",
    "test-npm-dangerous": "dotenv -- bash -c 'cd ../tests/npm; chmod +x setup-dangerous.sh; ./setup-dangerous.sh'",
    "test-go": "dotenv -- bash -c 'cd ../tests/go/; go clean -modcache; go mod tidy; export GOPROXY=https://:$JFROG_TOKEN@$JFROG_ID.jfrog.io/artifactory/api/go/go-virtual; go get github.com/gin-gonic/gin@v1.10.0'",
    "test-go-dangerous": "dotenv -- bash -c 'cd ../tests/go/; go clean -modcache; go mod tidy; export GOPROXY=https://:$JFROG_TOKEN@$JFROG_ID.jfrog.io/artifactory/api/go/go-virtual; go get github.com/golang/glog@v1.0.0'",
    "test-python": "dotenv -- bash -c 'cd ../tests/python; chmod +x setup.sh; ./setup.sh'",
    "test-python-dangerous": "dotenv -- bash -c 'cd ../tests/python; chmod +x setup-dangerous.sh; ./setup-dangerous.sh'",
    "test-ruby": "dotenv -- bash -c 'gem source -a https://$JFROG_EMAIL:$JFROG_TOKEN@$JFROG_ID.jfrog.io/artifactory/api/gems/ruby/; gem install bundler'",
    "test-ruby-dangerous": "dotenv -- bash -c 'gem source -a https://$JFROG_EMAIL:$JFROG_TOKEN@$JFROG_ID.jfrog.io/artifactory/api/gems/ruby/; gem install actionpack -v 5.2.0'",
    "test-gradle": "cross-env GRADLE_REPO_URL=https://$JFROG_ID.jfrog.io/artifactory/java JFROG_USERNAME=$JFROG_USERNAME JFROG_TOKEN=$JFROG_TOKEN JFROG_ID=$JFROG_ID.jfrog.io/artifactory chmod +x ../tests/gradle/gradlew; ../tests/gradle/gradlew --project-dir ../tests/gradle clean addDependencyAndBuild --refresh-dependencies -DrepoUrl=$GRADLE_REPO_URL -Pdependency=org.apache.mina:mina-core:2.2.4",
    "test-gradle-dangerous": "cross-env GRADLE_REPO_URL=https://$JFROG_ID.jfrog.io/artifactory/java JFROG_USERNAME=$JFROG_USERNAME JFROG_TOKEN=$JFROG_TOKEN JFROG_ID=$JFROG_ID.jfrog.io/artifactory ../tests/gradle/gradlew --project-dir ../tests/gradle clean addDependencyAndBuild --refresh-dependencies -DrepoUrl=$GRADLE_REPO_URL -Pdependency=org.apache.mina:mina-core:2.2.1",
    "test-maven": "cross-env MAVEN_REPO_URL=https://$JFROG_ID.jfrog.io/artifactory/java JFROG_USERNAME=$JFROG_USERNAME JFROG_TOKEN=$JFROG_TOKEN mvn clean install -U -Dbuild.cache.enabled=false -Dmaven.repo.remote=$MAVEN_REPO_URL -Ddependency=org.apache.mina:mina-core:2.2.4 -s ../tests/maven/settings.xml -f ../tests/maven/pom.xml -Ddynamic.dependency.groupId=org.apache.mina -Ddynamic.dependency.artifactId=mina-core -Ddynamic.dependency.version=2.2.4",
    "test-maven-dangerous": "cross-env MAVEN_REPO_URL=https://$JFROG_ID.jfrog.io/artifactory/java JFROG_USERNAME=$JFROG_USERNAME JFROG_TOKEN=$JFROG_TOKEN mvn clean install -U -Dbuild.cache.enabled=false -Dmaven.repo.remote=$MAVEN_REPO_URL -Ddependency=org.apache.mina:mina-core:2.2.4 -s ../tests/maven/settings.xml -f ../tests/maven/pom.xml -Ddynamic.dependency.groupId=org.apache.mina -Ddynamic.dependency.artifactId=mina-core -Ddynamic.dependency.version=2.2.1",
    "test-cargo": "dotenv -- bash -c 'cd ../tests/rust/; CARGO_REGISTRIES_DEFAULT=https://$JFROG_ID.jfrog.io/artifactory/api/cargo/cargo-remote cargo add serde'",
    "test-cargo-dangerous": "dotenv -- bash -c 'cd ../tests/rust/; CARGO_REGISTRIES_DEFAULT=https://$JFROG_ID.jfrog.io/artifactory/api/cargo/cargo-remote cargo add serde-json-wasm@1.0.0'",
    "test-terraform": "dotenv -- bash -c 'cd ../tests/terraform; chmod +x setup.sh; ./setup.sh'",
    "test-terraform-dangerous": "dotenv -- bash -c 'cd ../tests/terraform; chmod +x setup-dangerous.sh; ./setup-dangerous.sh'",
    "test-cocoapods": "dotenv -- bash -c 'curl https://$JFROG_EMAIL:$JFROG_TOKEN@$JFROG_ID.jfrog.io/artifactory/github/Alamofire'",
    "test-ansible": "dotenv -- bash -c 'cd ../tests/ansible; chmod +x setup.sh; ./setup.sh'",
    "test-bower": "dotenv -- bash -c 'cd ../tests/bower; chmod +x setup.sh; ./setup.sh'",
    "test-debian": "dotenv -- bash -c 'cd ../tests/debian; chmod +x setup.sh; ./setup.sh'",
    "test-alpine": "dotenv -- bash -c 'cd ../tests/alpine; chmod +x setup.sh; ./setup.sh'",
    "test-oci": "echo 'OCI uses the Docker registry. Therefore, the Docker test will be executed:'; npm run test-docker",
    "test-helm": "echo 'Helm uses the Docker registry. Therefore, the Docker test will be executed:'; npm run test-docker",

    "test-composer": "dotenv -- bash -c 'cd ../tests/composer; chmod +x setup.sh; ./setup.sh'",
    "test-composer-dangerous": "dotenv -- bash -c 'cd ../tests/composer; chmod +x setup-dangerous.sh; ./setup-dangerous.sh'",
    "test-vcs": "dotenv -- bash -c 'cd ../tests/vcs; chmod +x setup.sh; ./setup.sh'",
    "test-vcs-dangerous": "dotenv -- bash -c 'cd ../tests/vcs; chmod +x setup-dangerous.sh; ./setup-dangerous.sh'",
<<<<<<< HEAD
    "test-chef": "dotenv -- bash -c 'cd ../tests/chef; chmod +x setup.sh; ./setup.sh'",
    "test-generic": "dotenv -- bash -c 'curl https://$JFROG_EMAIL:$JFROG_TOKEN@$JFROG_ID.jfrog.io/artifactory/github/Alamofire'"
=======
    "test-sbt": "cross-env JFROG_ID=trials9g9m1 DEPENDENCY=org.apache.mina:mina-core:2.2.4 powershell -Command \"cd ../tests/sbt; sbt --no-share --batch --color=always clean update compile\"",
    "test-sbt-dangerous": "cross-env JFROG_ID=trials9g9m1 DEPENDENCY=org.apache.mina:mina-core:2.2.1 powershell -Command \"cd ../tests/sbt; sbt --no-share --batch --color=always clean update compile\""
>>>>>>> 3dee22c (Added SBT testing and full support.)
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "dotenv-cli": "^8.0.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.2"
  }
}
