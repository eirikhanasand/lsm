services:
  frontend:
    container_name: lsm_frontend
    build:
      context: .
      dockerfile: ./ui/Dockerfile
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      JFROG_ID: ${JFROG_ID}
      JFROG_TOKEN: ${JFROG_TOKEN}
      SERVER_API: ${SERVER_API}
      DEFAULT_RESULTS_PER_PAGE: ${DEFAULT_RESULTS_PER_PAGE}
      IMAGE_URL: ${IMAGE_URL}
      IMAGE_URL_SHORT: ${IMAGE_URL_SHORT}
      NEXT_PUBLIC_SELF_URL: ${NEXT_PUBLIC_SELF_URL}
      NEXT_PUBLIC_DISABLE_AUTH: ${NEXT_PUBLIC_DISABLE_AUTH}
      NEXT_PUBLIC_API: ${NEXT_PUBLIC_API}
      NEXT_PUBLIC_DISABLE_TOKEN_CHECK: ${NEXT_PUBLIC_DISABLE_TOKEN_CHECK}

  postgres:
    image: postgres:15
    container_name: lsm_database
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-osvuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB:-osvdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U osvuser -d osvdb"]
      interval: 5s
      retries: 5

  api:
    container_name: lsm_api
    build:
      context: .
      dockerfile: ./api/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      LOCAL_OSV: ${LOCAL_OSV}
      FRONTEND_URL: ${FRONTEND_URL}
      OSV_URL: ${OSV_URL}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      SELF_URL: ${NEXT_PUBLIC_SELF_URL}
      OAUTH_TOKEN_URL: ${OAUTH_TOKEN_URL}
      OAUTH_BASE_URL: ${OAUTH_BASE_URL}
      OAUTH_AUTH_URL: ${OAUTH_AUTH_URL}
    healthcheck:
      test: ["CMD-SHELL", "[ \"$(cat /tmp/health_status 2>/dev/null)\" = \"healthy\" ] && wget -qO- http://localhost:8080/api || [ \"$(cat /tmp/health_status 2>/dev/null)\" = \"starting\" ]"]
      interval: 5s
      retries: 5

volumes:
  postgres_data:
